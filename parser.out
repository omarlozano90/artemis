Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    MINUS

Grammar

Rule 0     S' -> assign
Rule 1     assign -> NAME EQUALS expr
Rule 2     expr -> term PLUS term
Rule 3     term -> term TIMES factor
Rule 4     term -> factor
Rule 5     factor -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 
EQUALS               : 1
MINUS                : 
NAME                 : 1
NUMBER               : 5
PLUS                 : 2
TIMES                : 3
error                : 

Nonterminals, with rules where they appear

assign               : 0
expr                 : 1
factor               : 3 4
term                 : 2 2 3

Parsing method: LALR

state 0

    (0) S' -> . assign
    (1) assign -> . NAME EQUALS expr

    NAME            shift and go to state 1

    assign                         shift and go to state 2

state 1

    (1) assign -> NAME . EQUALS expr

    EQUALS          shift and go to state 3


state 2

    (0) S' -> assign .



state 3

    (1) assign -> NAME EQUALS . expr
    (2) expr -> . term PLUS term
    (3) term -> . term TIMES factor
    (4) term -> . factor
    (5) factor -> . NUMBER

    NUMBER          shift and go to state 6

    factor                         shift and go to state 4
    expr                           shift and go to state 7
    term                           shift and go to state 5

state 4

    (4) term -> factor .

    TIMES           reduce using rule 4 (term -> factor .)
    $end            reduce using rule 4 (term -> factor .)
    PLUS            reduce using rule 4 (term -> factor .)


state 5

    (2) expr -> term . PLUS term
    (3) term -> term . TIMES factor

    PLUS            shift and go to state 9
    TIMES           shift and go to state 8


state 6

    (5) factor -> NUMBER .

    PLUS            reduce using rule 5 (factor -> NUMBER .)
    TIMES           reduce using rule 5 (factor -> NUMBER .)
    $end            reduce using rule 5 (factor -> NUMBER .)


state 7

    (1) assign -> NAME EQUALS expr .

    $end            reduce using rule 1 (assign -> NAME EQUALS expr .)


state 8

    (3) term -> term TIMES . factor
    (5) factor -> . NUMBER

    NUMBER          shift and go to state 6

    factor                         shift and go to state 10

state 9

    (2) expr -> term PLUS . term
    (3) term -> . term TIMES factor
    (4) term -> . factor
    (5) factor -> . NUMBER

    NUMBER          shift and go to state 6

    factor                         shift and go to state 4
    term                           shift and go to state 11

state 10

    (3) term -> term TIMES factor .

    TIMES           reduce using rule 3 (term -> term TIMES factor .)
    $end            reduce using rule 3 (term -> term TIMES factor .)
    PLUS            reduce using rule 3 (term -> term TIMES factor .)


state 11

    (2) expr -> term PLUS term .
    (3) term -> term . TIMES factor

    $end            reduce using rule 2 (expr -> term PLUS term .)
    TIMES           shift and go to state 8

